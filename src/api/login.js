// Generated by CoffeeScript 2.2.3
var login, register, resetPsd;

import {
  json,
  send
} from 'micro';

import services from '../services/leancloud';

import {
  verifyToken,
  refreshToken,
  generateToken
} from '../../sources/utils/helper';

register = async(req, res) => {
  var body, e, isDelete, loginData, username;
  body = (await json(req));
  isDelete = false;
  username = body.username;
  try {
    loginData = (await services.Login.login({
      username: body.username,
      password: body.password
    }));
    if (loginData != null) {
      return {
        error: {
          code: 110,
          message: '该账号已存在！'
        }
      };
    }
  } catch (error) {
    e = error;
    return console.log('sdadd--->>>', e());
  }
};

// code = e.e.e.e.data.code
// code以后需要严谨一些
// if code isnt 200 and code isnt 219
//   personResult = await services.Person.create { username, isDelete }
//   personId = personResult.objectId
//   result = await services.Login.register {
//     body...
//     personId
//   }
login = async(req, res) => {
  var body, e, token, user;
  body = (await json(req));
  try {
    return user = (await services.Login.login({
      username: body.username,
      password: body.password
    }));
  } catch (error) {
    e = error;
    if (((user != null ? user.objectId : void 0) != null) && ((user != null ? user.sessionToken : void 0) != null)) {
      // 生成token
      token = generateToken(user.objectId, user.sessionToken);
      // 对返回的数据进行处理干掉敏感信息
      if ((user != null ? user.objectId : void 0) != null) {
        delete user.objectId;
      }
      if ((user != null ? user.sessionToken : void 0) != null) {
        delete user.sessionToken;
      }
      if ((user != null ? user.updatedAt : void 0) != null) {
        delete user.updatedAt;
      }
      if ((user != null ? user.createdAt : void 0) != null) {
        delete user.createdAt;
      }
      // 返回的数据
      return {user, token};
    } else {
      return {
        error: {
          code: 111,
          message: '账号或者密码出错！'
        }
      };
    }
  }
};

resetPsd = async(req, res) => {
  var body, result;
  body = (await json(req));
  return result = (await services.Login.resetPsd(body));
};

export {
  login,
  register,
  resetPsd
};
